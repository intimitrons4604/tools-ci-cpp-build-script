apply plugin: 'cpp'

repositories {
    maven { url 'http://first.wpi.edu/FRC/roborio/maven/release' }
}

ext {
    /* Dependency versions */
    wpilibVersion = '+'
    csCoreVersion = '+'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

configurations {
    wpilib
}

dependencies {
    wpilib "edu.wpi.first.wpilibc:athena:$wpilibVersion@zip"
    wpilib "edu.wpi.first.wpilib:athena-runtime:$wpilibVersion@zip"
    wpilib "edu.wpi.first.wpilib:hal:$wpilibVersion@zip"
    wpilib "edu.wpi.cscore.cpp:cscore:$csCoreVersion:athena-uberzip@zip"
}

task extractWpilib(type: Sync) {
    from {
        configurations.wpilib.collect { zipTree(it) }
    }
    into "$buildDir/wpilib/"
}

model {
    buildTypes {
        ci
    }

    platforms {
        roboRio
    }

    toolChains {
        'frc-arm-gcc'(Gcc) {
            target ('roboRio') {
                def gccPrefix = 'arm-frc-linux-gnueabi-'

                cppCompiler.executable = gccPrefix + cppCompiler.executable
                linker.executable = gccPrefix + linker.executable
                assembler.executable = gccPrefix + assembler.executable
            }
        }
    }

    repositories {
        lib(PrebuiltLibraries) {
            wpilib {
                headers.srcDir "$buildDir/wpilib/include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("$buildDir/wpilib/lib/libwpi.so")
                }
            }
        }
    }

    components {
        cppRobotProject(NativeExecutableSpec) {
            targetPlatform 'roboRio'
            targetBuildTypes 'ci'
            baseName 'FRCUserProgram'

            binaries.all {
                tasks.withType(CppCompile) {
                    dependsOn extractWpilib
                }

                if (toolChain in Gcc && buildType == buildTypes.ci) {
                    cppCompiler.args(
                        '-std=c++1y',
                        '-Werror',
                        '-Wall',
                        '-Wextra',
                        '-Wpedantic',
                        '-Wformat=2',
                        '-O0'
                    )

                    linker.args(
                        "-L$buildDir/wpilib/lib",
                    )
                }
            }

            sources {
                cpp {
                    source {
                        if (project.hasProperty('srcDir')) {
                            def robotSrcDir = project.property('srcDir')
                            logger.quiet("Using specified robot source directory: $robotSrcDir")

                            srcDir robotSrcDir
                            include '**/*.cpp'
                        } else {
                            logger.quiet('Assuming robot source directory is ./src, relative to build.gradle')

                            srcDir 'src'
                            include '**/*.cpp'
                        }
                    }

                    lib library: 'wpilib', linkage: 'shared'
                }
            }
        }
    }
}

