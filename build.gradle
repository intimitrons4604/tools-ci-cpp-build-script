apply plugin: 'cpp'

repositories {
    maven { url 'http://first.wpi.edu/FRC/roborio/maven/release' }
}

ext {
    // CameraServer a.k.a. cscore
    csCoreVersion = "+"
    // NetworkTables a.k.a. ntcore
    networkTablesVersion = "+"
    wpilibVersion = "2016.5.1"
    wpiUtilVersion = "+"
}

configurations {
    wpilib
}

dependencies {
    wpilib "edu.wpi.first.wpilib.cmake:cpp-root:$wpilibVersion"
    // TODO 2017
    // wpilib "edu.wpi.first.wpilib:hal:$wpilibVersion"
    // wpilib "edu.wpi.first.wpilibc:athena:$wpilibVersion"
    //wpilib "edu.wpi.first.wpilib:wpiutil:$wpiUtilVersion:arm@zip"
    //wpilib "edu.wpi.first.wpilib.networktables.cpp:NetworkTables:$networkTablesVersion:arm@zip"
    //wpilib "edu.wpi.cscore.cpp:cscore:$csCoreVersion:athena-uberzip@zip"   
}

task downloadWpilib(type: Sync) {
    configurations.wpilib.files.each { file -> println file.name }

    from {
        configurations.wpilib.collect { zipTree(it) }
    }
    into "$buildDir/wpilib/"
}

model {
    repositories {
        lib(PrebuiltLibraries) {
            wpilib {
                headers.srcDir "$buildDir/wpilib/include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("$buildDir/wpilib/lib/libwpilib_nonshared.a")
                }
            }
        }
    }

    buildTypes {
        debug
    }

    platforms {
        arm {
            architecture 'arm'
            operatingSystem 'linux'
        }
    }

    toolChains {
        gcc(Gcc) {
            target ('arm') {
                cppCompiler.executable = 'arm-frc-linux-gnueabi-' + cppCompiler.executable
                linker.executable = 'arm-frc-linux-gnueabi-' + linker.executable
                assembler.executable = 'arm-frc-linux-gnueabi-' + assembler.executable

                cppCompiler.withArguments { args ->
                    args << '-std=c++1y' << '-Wformat=2' << '-Wall' << '-Wextra' << '-Werror' << '-pedantic'
                    args << '-Wno-psabi' << '-Wno-unused-parameter' << '-fPIC' << '-Og' << '-g3' << '-rdynamic'
                    args << '-Wno-error=deprecated-declarations'
                    args.remove('-m32')
                }
                linker.withArguments { args ->
                    args << '-rdynamic'
                    args.remove('m32')
                }
            }
        }
    }

    components {
        cppRobotProject(NativeExecutableSpec) {
            targetPlatform 'arm'

            binaries.all {
                tasks.withType(CppCompile) {
                    dependsOn downloadWpilib
                }

                cppCompiler.args '-pthread', '-Wno-unused-variable'
                linker.args "-L$buildDir/wpilib/lib", '-pthread', '-Wno-unused-variable', '-lwpi'
            }

            sources {
                cpp {
                    source {
                        srcDir 'src'
                        include '**/*.cpp'
                    }

                    lib library: 'wpilib', linkage: 'shared'
                }
            }
        }
    }
}

